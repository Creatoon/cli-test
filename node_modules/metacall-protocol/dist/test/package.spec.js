"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const path_1 = require("path");
const package_1 = require("../package");
describe('unit package', function () {
    const basePath = path_1.join(process.cwd(), 'src', 'test', 'resources', 'package');
    it('findFilesPath all', async () => {
        const expectedFiles = [
            'loaders/a/depth/folder/metacall.json',
            'loaders/csharp/metacall-cs.json',
            'loaders/gitignore/.gitignore',
            'loaders/gitignore/c',
            'loaders/metacall.json',
            'loaders/nodejs/metacall-node.json',
            'loaders/python/metacall-py.json',
            'loaders/ruby/metacall-rb.json',
            'runners/csharp/project.csproj',
            'runners/mixed/a.csproj',
            'runners/mixed/Gemfile',
            'runners/mixed/package.json',
            'runners/mixed/requirements.txt',
            'runners/nodejs/index.js',
            'runners/nodejs/package.json',
            'runners/python/requirements.txt',
            'runners/ruby/Gemfile'
        ];
        const files = await package_1.findFilesPath(basePath);
        assert_1.deepStrictEqual(files, expectedFiles);
    });
    it('findMetaCallJsons all', async () => {
        const loadersPath = path_1.join(basePath, 'loaders');
        const expectedFiles = [
            'a/depth/folder/metacall.json',
            'csharp/metacall-cs.json',
            'metacall.json',
            'nodejs/metacall-node.json',
            'python/metacall-py.json',
            'ruby/metacall-rb.json'
        ];
        const files = await package_1.findFilesPath(loadersPath);
        assert_1.deepStrictEqual(package_1.findMetaCallJsons(files), expectedFiles);
    });
    it('findMetaCallJsons empty', async () => {
        const runnersPath = path_1.join(basePath, 'runners');
        const expectedFiles = [];
        const files = await package_1.findFilesPath(runnersPath);
        assert_1.deepStrictEqual(package_1.findMetaCallJsons(files), expectedFiles);
    });
    it('findRunners all', async () => {
        const runnersPath = path_1.join(basePath, 'runners');
        const expectedFiles = [
            'csharp/project.csproj',
            'mixed/a.csproj',
            'mixed/Gemfile',
            'mixed/package.json',
            'mixed/requirements.txt',
            'nodejs/index.js',
            'nodejs/package.json',
            'python/requirements.txt',
            'ruby/Gemfile'
        ];
        const expectedRunners = [
            'csharp',
            'ruby',
            'nodejs',
            'python'
        ];
        const files = await package_1.findFilesPath(runnersPath);
        assert_1.deepStrictEqual(files, expectedFiles);
        assert_1.deepStrictEqual(Array.from(package_1.findRunners(files)), expectedRunners);
    });
    it('findRunners empty', async () => {
        const loadersPath = path_1.join(basePath, 'loaders');
        const expectedRunners = [];
        const files = await package_1.findFilesPath(loadersPath);
        assert_1.deepStrictEqual(Array.from(package_1.findRunners(files)), expectedRunners);
    });
    it('findRunners mixed', async () => {
        const runnersMixedPath = path_1.join(basePath, 'runners', 'mixed');
        const expectedRunners = [
            'csharp',
            'ruby',
            'nodejs',
            'python'
        ];
        const files = await package_1.findFilesPath(runnersMixedPath);
        assert_1.deepStrictEqual(Array.from(package_1.findRunners(files)), expectedRunners);
    });
    it('findRunners csharp', async () => {
        const runnersPath = path_1.join(basePath, 'runners', 'csharp');
        const expectedRunners = ['csharp'];
        const files = await package_1.findFilesPath(runnersPath);
        assert_1.deepStrictEqual(Array.from(package_1.findRunners(files)), expectedRunners);
    });
    it('findRunners nodejs', async () => {
        const runnersPath = path_1.join(basePath, 'runners', 'nodejs');
        const expectedRunners = ['nodejs'];
        const files = await package_1.findFilesPath(runnersPath);
        assert_1.deepStrictEqual(Array.from(package_1.findRunners(files)), expectedRunners);
    });
    it('findRunners python', async () => {
        const runnersPath = path_1.join(basePath, 'runners', 'python');
        const expectedRunners = ['python'];
        const files = await package_1.findFilesPath(runnersPath);
        assert_1.deepStrictEqual(Array.from(package_1.findRunners(files)), expectedRunners);
    });
    it('findRunners ruby', async () => {
        const runnersPath = path_1.join(basePath, 'runners', 'ruby');
        const expectedRunners = ['ruby'];
        const files = await package_1.findFilesPath(runnersPath);
        assert_1.deepStrictEqual(Array.from(package_1.findRunners(files)), expectedRunners);
    });
    it('generateJsonsFromFiles', async () => {
        const runnersPath = path_1.join(basePath, 'runners');
        const files = await package_1.findFilesPath(runnersPath);
        const expectedJsons = [
            {
                language_id: 'file',
                path: '.',
                scripts: [
                    'csharp/project.csproj',
                    'mixed/a.csproj',
                    'mixed/Gemfile',
                    'mixed/package.json',
                    'mixed/requirements.txt',
                    'nodejs/index.js',
                    'nodejs/package.json',
                    'python/requirements.txt',
                    'ruby/Gemfile'
                ]
            },
            { language_id: 'node', path: '.', scripts: ['nodejs/index.js'] }
        ];
        assert_1.deepStrictEqual(package_1.generateJsonsFromFiles(files), expectedJsons);
    });
});
