"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const fs_1 = require("fs");
const path_1 = require("path");
const package_1 = require("../package");
describe('integration package', function () {
    const basePath = path_1.join(process.cwd(), 'src', 'test', 'resources', 'integration', 'package');
    it('generatePackage wrong path', async () => {
        const wrongPath = path_1.join(basePath, 'this', 'does', 'not', 'exist');
        await assert_1.rejects(package_1.generatePackage(wrongPath), `Error: ENOENT: no such file or directory, scandir '${wrongPath}'`);
    });
    it('generatePackage empty path', async () => {
        const emptyPath = path_1.join(basePath, 'empty');
        if (!fs_1.existsSync(emptyPath)) {
            fs_1.mkdirSync(emptyPath);
        }
        const descriptor = await package_1.generatePackage(emptyPath);
        assert_1.deepStrictEqual(descriptor, {
            error: package_1.PackageError.Empty,
            files: [],
            jsons: [],
            runners: []
        });
    });
    it('generatePackage without jsons python', async () => {
        const jsonsPath = path_1.join(basePath, 'jsons', 'python');
        const descriptor = await package_1.generatePackage(jsonsPath);
        assert_1.deepStrictEqual(descriptor, {
            error: package_1.PackageError.JsonNotFound,
            files: ['index.py', 'requirements.txt'],
            jsons: [],
            runners: ['python']
        });
    });
    it('generatePackage without jsons nodejs', async () => {
        const jsonsPath = path_1.join(basePath, 'jsons', 'nodejs');
        const descriptor = await package_1.generatePackage(jsonsPath);
        assert_1.deepStrictEqual(descriptor, {
            error: package_1.PackageError.JsonNotFound,
            files: ['index.js', 'package.json'],
            jsons: [],
            runners: ['nodejs']
        });
    });
    it('generatePackage without runners python', async () => {
        const runnersPath = path_1.join(basePath, 'runners', 'python');
        const descriptor = await package_1.generatePackage(runnersPath);
        assert_1.deepStrictEqual(descriptor, {
            error: package_1.PackageError.None,
            files: ['index.py', 'metacall.json'],
            jsons: ['metacall.json'],
            runners: []
        });
    });
    it('generatePackage without runners nodejs', async () => {
        const runnersPath = path_1.join(basePath, 'runners', 'nodejs');
        const descriptor = await package_1.generatePackage(runnersPath);
        assert_1.deepStrictEqual(descriptor, {
            error: package_1.PackageError.None,
            files: ['index.js', 'metacall.json'],
            jsons: ['metacall.json'],
            runners: []
        });
    });
    it('generatePackage all python', async () => {
        const allPath = path_1.join(basePath, 'all', 'python');
        const descriptor = await package_1.generatePackage(allPath);
        assert_1.deepStrictEqual(descriptor, {
            error: package_1.PackageError.None,
            files: ['index.py', 'metacall.json', 'requirements.txt'],
            jsons: ['metacall.json'],
            runners: ['python']
        });
    });
    it('generatePackage all nodejs', async () => {
        const allPath = path_1.join(basePath, 'all', 'nodejs');
        const descriptor = await package_1.generatePackage(allPath);
        assert_1.deepStrictEqual(descriptor, {
            error: package_1.PackageError.None,
            files: ['index.js', 'metacall.json', 'package.json'],
            jsons: ['metacall.json'],
            runners: ['nodejs']
        });
    });
    it('generateJsonsFromFiles', async () => {
        const allPath = path_1.join(basePath, 'all');
        const files = await package_1.findFilesPath(allPath);
        const expectedJsons = [
            {
                language_id: 'file',
                path: '.',
                scripts: [
                    'nodejs/index.js',
                    'nodejs/metacall.json',
                    'nodejs/package.json',
                    'python/index.py',
                    'python/metacall.json',
                    'python/requirements.txt'
                ]
            },
            { language_id: 'node', path: '.', scripts: ['nodejs/index.js'] },
            { language_id: 'py', path: '.', scripts: ['python/index.py'] }
        ];
        assert_1.deepStrictEqual(package_1.generateJsonsFromFiles(files), expectedJsons);
    });
});
