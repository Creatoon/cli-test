"use strict";
/*

* About File:

    this is just a client that implements all the rest API from the FaaS, so each function it contains is an endpoint in the FaaS for deploying and similar

    refresh: updates the auth token
    validate: validates the auth token
    deployEnabled: checks if you're able to deploy
    listSubscriptions: gives you a list of the subscription available
    inspect: gives you are deploys with it's endpoints
    upload: uploads a zip (package) into the faas
    deploy: deploys the previously uploaded zip into the faas
    deployDelete: deletes the deploy and the zip

*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
exports.default = (token, baseURL) => {
    const api = {
        refresh: () => axios_1.default
            .get(baseURL + '/api/account/refresh-token', {
            headers: { Authorization: 'jwt ' + token }
        })
            .then(res => res.data),
        validate: () => axios_1.default
            .get(baseURL + '/validate', {
            headers: { Authorization: 'jwt ' + token }
        })
            .then(res => res.data),
        deployEnabled: () => axios_1.default
            .get(baseURL + '/api/account/deploy-enabled', {
            headers: { Authorization: 'jwt ' + token }
        })
            .then(res => res.data),
        listSubscriptions: async () => {
            const res = await axios_1.default.get(baseURL + '/api/billing/list-subscriptions', {
                headers: { Authorization: 'jwt ' + token }
            });
            const subscriptions = {};
            for (const id of res.data) {
                if (subscriptions[id] === undefined) {
                    subscriptions[id] = 1;
                }
                else {
                    ++subscriptions[id];
                }
            }
            return subscriptions;
        },
        inspect: async () => axios_1.default
            .get(baseURL + '/api/inspect', {
            headers: { Authorization: 'jwt ' + token }
        })
            .then(res => res.data),
        upload: async (name, blob, jsons = [], runners = []) => {
            const fd = new form_data_1.default();
            fd.append('id', name);
            fd.append('type', 'application/x-zip-compressed');
            fd.append('jsons', JSON.stringify(jsons));
            fd.append('runners', JSON.stringify(runners));
            fd.append('raw', blob, {
                filename: 'blob',
                contentType: 'application/x-zip-compressed'
            });
            const res = await axios_1.default.post(baseURL + '/api/package/create', fd, {
                headers: {
                    Authorization: 'jwt ' + token,
                    ...fd.getHeaders()
                }
            });
            return res.data;
        },
        deploy: (name, env, plan, release = Date.now().toString(16), version = 'v1') => axios_1.default
            .post(baseURL + '/api/deploy/create', {
            resourceType: 'Package',
            suffix: name,
            release,
            env,
            plan,
            version
        }, {
            headers: { Authorization: 'jwt ' + token }
        })
            .then(res => res.data),
        deployDelete: (prefix, suffix, version = 'v1') => axios_1.default
            .post(baseURL + '/api/deploy/delete', {
            prefix,
            suffix,
            version
        }, {
            headers: { Authorization: 'jwt ' + token }
        })
            .then(res => res.data)
    };
    return api;
};
